// lines 103-134 in FilterMain.cpp
output -> width = input -> width;
  output -> height = input -> height;


  for(int col = 1; col < (input -> width) - 1; col = col + 1) {
    for(int row = 1; row < (input -> height) - 1 ; row = row + 1) {
      for(int plane = 0; plane < 3; plane++) {

	output -> color[plane][row][col] = 0;

	for (int j = 0; j < filter -> getSize(); j++) {
	  for (int i = 0; i < filter -> getSize(); i++) {	
	    output -> color[plane][row][col]
	      = output -> color[plane][row][col]
	      + (input -> color[plane][row + i - 1][col + j - 1] 
		 * filter -> get(i, j) );
	  }
	}
	
	output -> color[plane][row][col] = 	
	  output -> color[plane][row][col] / filter -> getDivisor();

	if ( output -> color[plane][row][col]  < 0 ) {
	  output -> color[plane][row][col] = 0;
	}

	if ( output -> color[plane][row][col]  > 255 ) { 
	  output -> color[plane][row][col] = 255;
	}
      }
    }
  }
  
  
  
  
  
  
  
   long long cycStart, cycStop;
    
    cycStart = rdtscll();

    short h = input -> height;
    short w = input -> width;
    output -> width = w;
    output -> height = h;
    char get00 = filter -> get(0,0);
    char get01 = filter -> get(0,1);
    char get02 = filter -> get(0,2);
    char get10 = filter -> get(1,0);
    char get11 = filter -> get(1,1);
    char get12 = filter -> get(1,2);
    char get20 = filter -> get(2,0);
    char get21 = filter -> get(2,1);
    char get22 = filter -> get(2,2);
    
    char divisor = filter -> getDivisor();
    short temp;
 for(int row = 1; row < h - 1 ; row = row + 1) {
  for(int col = 1; col < w - 1; col = col + 1) {
            
         // plane = 0
            temp = 0;
                
            temp += ((input -> color[0][row + 0 - 1][col + 0 - 1])*get00);
            temp +=((input -> color[0][row + 0 - 1][col + 1 - 1])*get01);
            temp +=((input -> color[0][row + 0 - 1][col + 2 - 1])*get02);
            temp +=((input -> color[0][row + 1 - 1][col + 0 - 1])*get10);
            temp +=((input -> color[0][row + 1 - 1][col + 1 - 1])*get11);
            temp +=((input -> color[0][row + 1 - 1][col + 2 - 1])*get12);
            temp +=((input -> color[0][row + 2 - 1][col + 0 - 1])*get20);
            temp +=((input -> color[0][row + 2 - 1][col + 1 - 1])*get21);
            temp +=((input -> color[0][row + 2 - 1][col + 2 - 1])*get22);
          
	
	
        temp = 	temp / divisor;

	if ( temp  < 0 ) {
	  temp = 0;
	}

	if ( temp  > 255 ) { 
	  temp = 255;
	}
      
    output -> color[0][row][col] = temp;   
    // plane = 1
    
          temp = 0;
          
            temp += ((input -> color[1][row + 0 - 1][col + 0 - 1])*get00);
            temp +=((input -> color[1][row + 0 - 1][col + 1 - 1])*get01);
            temp +=((input -> color[1][row + 0 - 1][col + 2 - 1])*get02);
            temp +=((input -> color[1][row + 1 - 1][col + 0 - 1])*get10);
            temp +=((input -> color[1][row + 1 - 1][col + 1 - 1])*get11);
            temp +=((input -> color[1][row + 1 - 1][col + 2 - 1])*get12);
            temp +=((input -> color[1][row + 2 - 1][col + 0 - 1])*get20);
            temp +=((input -> color[1][row + 2 - 1][col + 1 - 1])*get21);
            temp +=((input -> color[1][row + 2 - 1][col + 2 - 1])*get22);
          
	
	
        temp = 	temp / divisor;

	if ( temp  < 0 ) {
	  temp = 0;
	}

	if ( temp  > 255 ) { 
	  temp = 255;
	}
    
    output -> color[1][row][col] = temp;
    
    // plane = 2
          temp = 0;
          
            temp += ((input -> color[2][row + 0 - 1][col + 0 - 1])*get00);
            temp +=((input -> color[2][row + 0 - 1][col + 1 - 1])*get01);
            temp +=((input -> color[2][row + 0 - 1][col + 2 - 1])*get02);
            temp +=((input -> color[2][row + 1 - 1][col + 0 - 1])*get10);
            temp +=((input -> color[2][row + 1 - 1][col + 1 - 1])*get11);
            temp +=((input -> color[2][row + 1 - 1][col + 2 - 1])*get12);
            temp +=((input -> color[2][row + 2 - 1][col + 0 - 1])*get20);
            temp +=((input -> color[2][row + 2 - 1][col + 1 - 1])*get21);
            temp +=((input -> color[2][row + 2 - 1][col + 2 - 1])*get22);
          
              
            
	
	
        temp = 	temp / divisor;

	if ( temp  < 0 ) {
	  temp = 0;
	}

	if ( temp  > 255 ) { 
	  temp = 255;
	}
     
      output -> color[2][row][col] = temp;
    }
  }

    cycStop = rdtscll();
    double diff = cycStop - cycStart;
    double diffPerPixel = diff / (output->width * output->height);
    fprintf(stderr, "Took %f cycles to process, or %f cycles per pixel\n",
        diff, diff / (output->width * output->height));
    return diffPerPixel;